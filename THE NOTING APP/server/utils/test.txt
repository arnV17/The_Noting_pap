
    \n\nChapter 1.Introduction to Java as \nObject Oriented Programming \nLanguage\nProf Samiran Maity\n\nWhenever in self doubt always \nremember “You are the Best”.\nProf Samiran Maity\n\nComparison of Procedural and Object-Oriented \nProgramming\nProcedural \nProgramming\nObject-Oriented \nProgramming\nFocus\nFocus on \nprocedures or \nfunctions\nFocus on objects \nand classes\nProgram \nStructure\nProgram is broken \ndown into \nprocedures or \nfunctions\nProgram is \ncomposed of \nobjects that have \nproperties and \nbehaviors\nReusabilityLimited reusabilityHigh reusability\nMaintenance\nDifficult to \nmaintain\nEasier to maintain\nExecution Speed\nFaster execution \nspeed\nSlower execution \nspeed\nLearning CurveEasier to learn\nSteeper learning \ncurve\n\nFeatures of Java\n•Object-Oriented: Java is based on objects that contain data and functions that operate on that data.\n•Platform Independent: Java code can run on any device that has a Java Virtual Machine (JVM) installed.\n•Simple: Java has a relatively simple syntax compared to other programming languages.\n•Secure: Java has built-in security features that make it a secure language for programming.\n•Multithreaded: Java supports multithreading, which allows a program to perform multiple tasks \nsimultaneously.\n•Robust: Java is a robust language that can handle errors and exceptions in a program.\n•Dynamic: Java is a dynamic language that can load classes and libraries at runtime.\n•Portable: Java code can be easily ported to different platforms without needing to be rewritten.\n•High-Performance: Java is a high-performance language that can run quickly and efficiently.\n•Extensive Libraries: Java has an extensive collection of libraries and APIs that make it easy to perform various \ntasks.\n\nWhat is the Java Virtual Machine (JVM)?\nThe JVM is a software program that runs Java code on a computer. It's like a translator that converts Java code into a language that \nthe computer's processor can understand.\nHow does the JVM work?\nHere's a step-by-step explanation:\nCompilation: The Java compiler converts the Java code into an intermediate format called bytecode.\nLoading: The JVM loads the bytecode into memory.\nVerification: The JVM checks the bytecode for errors and ensures that it follows the rules of the Java language.\nExecution: The JVM executes the bytecode by translating it into machine code that the computer's processor can understand.\nBenefits of the JVM\nThe JVM provides several benefits, including:\nPlatform Independence: The JVM allows Java code to run on any device that has a JVM installed, regardless of the underlying \noperating system or hardware architecture.\nMemory Management: The JVM automatically manages memory allocation and deallocation, which helps prevent common \nprogramming errors like memory leaks.\nSecurity: The JVM provides a sandboxed environment for running Java code, which helps prevent malicious code from accessing \nsensitive system resources.\n\nPrinciples of Object-Oriented Programming (OOP) explained in simple terms:\n1. Object\nAn object represents a real-world entity or concept, such as a car, a person, or a bank account.\nAn object has properties (data) and methods (functions) that describe and define its behavior.\n2. Class\nA class is a blueprint or template that defines the properties and methods of an object.\nA class is essentially a design pattern or template that defines the characteristics of an object.\n3. Encapsulation\nEncapsulation is the principle of hiding the implementation details of an object from the outside \nworld.\nEncapsulation helps to protect the internal state of an object from external interference and misuse.\n\n4. Abstraction\nAbstraction is the principle of showing only the necessary information to the outside world \nwhile hiding the internal details.\nAbstraction helps to reduce complexity and improve modularity in software systems.\n5. Inheritance\nInheritance is the principle of creating a new class based on an existing class.\nInheritance helps to promote code reusability and facilitate the creation of a hierarchy of \nrelated classes.\n6. Polymorphism\nPolymorphism is the principle of taking on multiple forms.\nPolymorphism allows objects of different classes to be treated as objects of a common \nsuperclass.\n\nHere's an examplethat illustrates these principles:\nSuppose we want to model a simple banking system with two types of accounts: SavingsAccountand \nCheckingAccount.\nClass: We define a BankAccountclass that serves as a blueprint for both SavingsAccountand CheckingAccount.\nObject: We create objects savingsAccountand checkingAccountthat represent individual bank accounts.\nEncapsulation: We encapsulate the account balance and account number within the BankAccountclass to \nprotect them from external interference.\nAbstraction: We provide a simplified interface for depositing and withdrawing money from the account, hiding \nthe internal implementation details.\nInheritance: We create SavingsAccountand CheckingAccountclasses that inherit the common attributes and \nmethods from the BankAccountclass.\nPolymorphism: We can treat savingsAccountand checkingAccountobjects as BankAccountobjects, allowing us \nto perform common operations like depositing and withdrawing money without knowing the specific account \ntype.\n\nBasic Constructs in Java\n1. Constants\nA constant is a value that cannot be changed once it's declared.\nIn Java, constants are declared using the final keyword.\nfinal int MAX_SIZE = 100;\n2. Variables\nA variable is a name given to a memory location that stores a value.\nIn Java, variables are declared using a data type and a name.\nint age = 25;\n\n3. Data Types\nA data type determines the type of value a variable can hold.\nJava has two main categories of data types: primitive data types and non primitive data \ntypes\nbyte: 1 byte (8 bits)\nshort: 2 bytes (16 bits)\nint: 4 bytes (32 bits)\nlong: 8 bytes (64 bits)\nfloat: 4 bytes (32 bits)\ndouble: 8 bytes (64 bits)\nboolean: 1 byte (8 bits) (Note: This can vary depending on the JVM implementation)\nchar: 2 bytes (16 bits)\n\nWhat is a Wrapper Class?\nA wrapper class is a class that wraps around a primitive data type, converting it into an object.\nWhy Do We Need Wrapper Classes?\nWe need wrapper classes because Java is an object-oriented language, and it treats everything as objects. However, primitive data types like int, double, \nand Boolean are not objects. Wrapper classes help to convert these primitive data types into objects, making it possible to use them in object-oriented \nprogramming.\nTypes of Wrapper Classes\nHere are the eight primitive data types and their corresponding wrapper classes:\nbyte -Byte\nshort -Short\nint -Integer\nlong -Long\nfloat -Float\ndouble -Double\nboolean-Boolean\nchar -Character\n\n// Primitive data type\nint primitiveInt= 10;\n// Wrapper class\nInteger wrapperInt= Integer.valueOf(primitiveInt);\n// Now you can use the wrapperIntobject\nSystem.out.println(wrapperInt);\n\nHere's a breakdown of what's happening in the previous code:\nint primitiveInt= 10;\nDeclares a primitive int variable named primitiveInt.\nAssigns the value 10 to primitiveInt.\nInteger wrapperInt= Integer.valueOf(primitiveInt);\nCreates an Integer wrapper class object named wrapperInt.\nUses the Integer.valueOf() method to convert the primitive int value 10 to an \nInteger object.\nAssigns the resulting Integer object to wrapperInt.\nSystem.out.println(wrapperInt);\nPrints the value of wrapperIntto the console.\n\n5. Operators\nOperators are symbols used to perform operations on variables and values.\nJava provides various types of operators, including:\nArithmetic Operators:\n+: addition\n-: subtraction\n*: multiplication\n/: division\n%: modulus\n\nComparison Operators:\n==: equal to\n!=: not equal to\n>: greater than\n<: less than\n>=: greater than or equal to\n<=: less than or equal to\nLogical Operators:\n&&: logical and\n||: logical or\n!: logical not\n\nAssignment Operators:\n=: assignment\n+=: addition assignment\n-=: subtraction assignment\n*=: multiplication assignment\n/=: division assignment\n%=: modulus assignment\n\n6. Expressions\nAn expression is a combination of variables, operators, and values that \nevaluates to a single value.\nExpressions can be used to perform calculations, make decisions, and \nassign values to variables.\nint x = 5;\nint y = 3;\nint result = x + y;\n\nCommand Line Arguments\n•Command line arguments are passed to a Java program when it is \nexecuted from the command line.\n•The arguments are stored in the argsarray in the main method.\n\nExample of Command Line Arguments\npublic class CommandLineArgs\n{\npublic static void main(String[] args) \n{\nfor (int i= 0; i< args.length; i++) \n{\nSystem.out.println(\"Argument \" + (i+ 1) + \": \" + args[i]);\n}\n}\n}\n\n•To compile and run this program from the command line:\n•Save the code in a file named CommandLineArgs.java.\n•Compile the program using javacCommandLineArgs.java.\n•Run the program using java CommandLineArgsarg1 arg2 arg3 \n(replace arg1, arg2, etc., with your desired arguments).\n•Our desired argument is Hello World\n\nOutput\nArgument 1: Hello\nArgument 2: World\n\nBufferedReaderClass\n•The BufferedReaderclass is used to read text from a character-input \nstream.\n•It provides a way to read text line by line.\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class BufferedReaderExample\n{\npublic static void main(String[] args) throws IOException\n{\nBufferedReaderreader = new BufferedReader(new InputStreamReader(System.in));\nSystem.out.print(\"Enter your name: \");\nString name = reader.readLine();\nSystem.out.println(\"Hello, \" + name + \"!\");\nreader.close();\n}\n}\n\nOutput\nEnter your name: John\nHello, John!\n\nScanner Class\n•The Scanner class is used to get input of primitive types like int, \ndouble, long, String, etc.\n•It provides a way to read input using various methods like next(), \nnextInt(), nextDouble(), etc.\n\nimport java.util.Scanner;\npublic class ScannerExample\n{\npublic static void main(String[] args) \n{\nScanner scanner= new Scanner(System.in);\nSystem.out.print(\"Enter your name: \");\nString name = scanner.nextLine();\nSystem.out.print(\"Enter your age: \");\nint age = scanner.nextInt();\nSystem.out.println(\"Hello, \" + name + \"! You are \" + age + \" years old.\");\nscanner.close();\n}\n}\n\nEnter your name: John\nEnter your age: 30\nHello, John! You are 30 years old.\n\nSuggested Experiment 1\nSimple java Program to demonstrate input using Scanner, \nBufferedReaderand command line arguments.\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class InputDemo{\npublic static void main(String[] args) throws IOException{\n// Input using Command Line Arguments\nSystem.out.println(\"Input using Command Line Arguments:\");\nfor (int i= 0; i< args.length; i++) {\nSystem.out.println(\"Argument \" + (i+ 1) + \": \" + args[i]);\n}\n// Input using BufferedReader\nSystem.out.println(\"\\nInputusing BufferedReader:\");\nBufferedReaderreader = new BufferedReader(new InputStreamReader(System.in));\nSystem.out.print(\"Enter your name: \");\nString name = reader.readLine();\nSystem.out.println(\"Hello, \" + name + \"!\");\n\n// Input using Scanner\nSystem.out.println(\"\\nInputusing Scanner:\");\nScanner scanner= new Scanner(System.in);\nSystem.out.print(\"Enter your age: \");\nint age = scanner.nextInt();\nSystem.out.println(\"You are \" + age + \" years old.\");\n// Close the BufferedReaderand Scanner objects\nreader.close();\nscanner.close();\n}\n}\n\nOutput\nInput using Command Line Arguments:\nArgument 1: John\nArgument 2: 30\nInput using BufferedReader:\nEnter your name: \nHello, ! \nInput using Scanner:\nEnter your age: \nYou are  years old.\n\nSuggested Experiment 1a\nGiven an integer, n, perform the following conditional actions:\n•If n is odd, print Weird\n•If n is even and in the inclusive range of 2 to 5, print Not Weird\n•If n is even and in the inclusive range of 6 to 20, print Weird\n•If n is even and greater than 20, print Not Weird\n\nimport java.util.Scanner;\npublic class WeirdOrNot{\npublic static void main(String[] args) {\nScanner scanner= new Scanner(System.in);\nint n = scanner.nextInt();\nscanner.close();\n\nif (n % 2 != 0) {\nSystem.out.println(\"Weird\");\n} else if (n >= 2 && n <= 5) {\nSystem.out.println(\"Not Weird\");\n} else if (n >= 6 && n <= 20) {\nSystem.out.println(\"Weird\");\n} else {\nSystem.out.println(\"Not Weird\");\n}\n}\n}\n\n1b.WAP to find largest of 3 numbers using \nnested if else and nested ternary operator.\nnested if else\nimport java.util.Scanner;\npublic class LargestOfThree{\npublic static void main(String[] args) {\nScanner scanner= new Scanner(System.in);\nSystem.out.print(\"Enter first number: \");\nint num1 = scanner.nextInt();\nSystem.out.print(\"Enter second number: \");\nint num2 = scanner.nextInt();\nSystem.out.print(\"Enter third number: \");\nint num3 = scanner.nextInt();\n\nscanner.close();\nif (num1 > num2) {\nif (num1 > num3) {\nSystem.out.println(\"Largest number is: \" + num1);\n} else {\nSystem.out.println(\"Largest number is: \" + num3);\n}\n} else {\nif (num2 > num3) {\nSystem.out.println(\"Largest number is: \" + num2);\n} else {\nSystem.out.println(\"Largest number is: \" + num3);\n}\n}\n}\n}\n\nnested ternary operator\nimport java.util.Scanner;\npublic class LargestOfThree{\npublic static void main(String[] args) {\nScanner scanner= new Scanner(System.in);\nSystem.out.print(\"Enter first number: \");\nint num1 = scanner.nextInt();\nSystem.out.print(\"Enter second number: \");\nint num2 = scanner.nextInt();\n\nSystem.out.print(\"Enter third number: \");\nint num3 = scanner.nextInt();\nscanner.close();\nint largest = (num1 > num2) ? ((num1 > num3) ? num1 : num3) : ((num2 \n> num3) ? num2 : num3);\nSystem.out.println(\"Largest number is: \" + largest);\n}\n}\n\n1c Write a Java program that reads a positive \ninteger from command line and count the \nnumber of digits the number (less than ten \nbillion) has.\n\nimport java.util.Scanner;\npublic class DigitCounter{\npublic static void main(String[] args) {\n// Create a Scanner object to read input from the command line\nScanner scanner= new Scanner(System.in);\n// Prompt the user to enter a positive integer\nSystem.out.print(\"Enter a positive integer (less than ten billion): \");\nlong number = scanner.nextLong();\n\n// Ensure the number is positive and less than ten billion\nif (number <= 0 || number >= 10_000_000_000L) {\nSystem.out.println(\"Invalid input. Please enter a positive integer less than ten billion.\");\nreturn;\n}\n// Count the number of digits\nint digitCount= 0;\nwhile (number != 0) {\nnumber /= 10; // Remove the last digit\ndigitCount++; // Increment the digit count\n}\n\n// Output the result\nSystem.out.println(\"The number of digits is: \" + digitCount);\n}\n}\nOutput\nEnter a positive integer (less than ten billion): 12345\nThe number of digits is: 5\n\n•1d Write a menu driven program using switch \ncase to perform mathematical operations. \n\nimport java.util.Scanner;\npublic class SimpleCalculator{\npublic static void main(String[] args) {\nScanner scanner= new Scanner(System.in);\n// Display the menu\nSystem.out.println(\"Menu:\");\nSystem.out.println(\"1. Addition\");\n\nSystem.out.println(\"2. Subtraction\");\nSystem.out.println(\"3. Multiplication\");\nSystem.out.println(\"4. Division\");\nSystem.out.print(\"Enter your choice (1-4): \");\nscanner.close();\n}\n}\n\n// Read the user's choice\nint choice = scanner.nextInt();\n// Read two numbers\nSystem.out.print(\"Enter first number: \");\ndouble num1 = scanner.nextDouble();\nSystem.out.print(\"Enter second number: \");\ndouble num2 = scanner.nextDouble();\n\n// Perform the operation based on the choice\nswitch (choice) {\ncase 1:\nSystem.out.println(\"Result: \" + (num1 + num2));\nbreak;\ncase 2:\nSystem.out.println(\"Result: \" + (num1 -num2));\nbreak;\ncase 3:\nSystem.out.println(\"Result: \" + (num1 * num2));\nbreak;\n\ncase 4:\nif (num2 != 0) {\nSystem.out.println(\"Result: \" + (num1 / num2));\n} else {\nSystem.out.println(\"Error: Division by zero!\");\n}\nbreak;\ndefault:\nSystem.out.println(\"Invalid choice!\");\n}\n\nOutput\nMenu:\n1. Addition\n2. Subtraction\n3. Multiplication\n4. Division\nEnter your choice (1-4): 1\nEnter first number: 10\nEnter second number: 20\nResult: 30.0\n\n•1e.WAP to find grade of student from input \nmarks using if else ladder.\n\nimport java.util.Scanner;\npublic class GradeCalculator{\npublic static void main(String[] args) {\nScanner scanner= new Scanner(System.in);\n\nSystem.out.print(\"Enter marks (out of 100): \");\nint marks = scanner.nextInt();\nif (marks >= 80) {\nSystem.out.println(\"Grade: A\");\n} else if (marks >= 60) {\nSystem.out.println(\"Grade: B\");\n\n} else if (marks >= 40) {\nSystem.out.println(\"Grade: C\");\n} else if (marks >= 0) {\nSystem.out.println(\"Grade: D\");\n} else {\nSystem.out.println(\"Invalid marks\");\n}\n}\n}\n\n•1.F)WAP to print the sum of following series \n1+1/2^2+1/3^2+1/4^2......+1/n^2\n\nimport java.util.Scanner;\npublic class SeriesSum{\npublic static void main(String[] args) {\nScanner scanner= new Scanner(System.in);\nSystem.out.print(\"Enter the value of n: \");\nint n = scanner.nextInt();\n•\n\ndouble sum = 0.0;\nfor (int i= 1; i<= n; i++) {\nsum += 1.0 / (i* i);\n}\nSystem.out.println(\"Sum of the series: \" + sum);\n}\n}\n\n1g.A).WAP to display the following patterns: \n1\n2       1\n1       2       3\n4       3       2       1\n1       2       3       4       5\n6       5       4       3       2       1\n1       2       3       4       5       6       7\n\npublic class PatternDisplay{\npublic static void main(String[] args) {\nint n = 7; // number of rows\nfor (int i= 1; i<= n; i++) {\nif (i% 2 == 1) { // odd rows\nfor (int j = 1; j <= i; j++) {\nSystem.out.print(j + \"       \");\n}\n}\n\nelse { // even rows\nfor (int j = i; j >= 1; j--) {\nSystem.out.print(j + \"       \");\n}\n}\nSystem.out.println();\n}\n}\n}\n\n1g.B).WAP to display the following patterns: \nA\nCB\nFED\nJIHG\n\npublic class PatternDisplay{\npublic static void main(String[] args) {\nString[] arr= {\"A\", \"CB\", \"FED\", \"JIHG\"};\nfor (int i= 0; i< arr.length; i++) {\nfor (int j = 0; j < 3 -i; j++) {\nSystem.out.print(\" \");\n}\nSystem.out.println(arr[i]);\n}\n}\n}"
